generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              String         @id @default(uuid()) @db.Uuid
  password        String
  email           String         @unique
  name            String
  corporateReason String
  cnpj            String         @unique
  users           User[]
  serviceOrders   ServiceOrder[]
  products        Product[]
}

model User {
  id                      String         @id @default(uuid()) @db.Uuid
  email                   String         @unique
  name                    String
  password                String
  document                String         @unique
  address                 String?
  date                    DateTime       @default(now())
  neighborhood            String?
  city                    String?
  number                  String?
  userType                String
  companyId               String         @db.Uuid
  company                 Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  serviceOrders           ServiceOrder[]
  technicianServiceOrders ServiceOrder[] @relation("Technician")
  clientServiceOrders     ServiceOrder[] @relation("Client")
}

model ServiceOrder {
  id           String   @id @default(uuid()) @db.Uuid
  description  String?
  defect       String?
  report       String?
  extras       String?
  date         DateTime @default(now())
  companyId    String   @db.Uuid
  status       String   @default("ABERTO")
  userId       String   @db.Uuid
  technicianId String?  @db.Uuid
  clientId     String?  @db.Uuid

  company    Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user       User                  @relation(fields: [userId], references: [id])
  technician User?                 @relation("Technician", fields: [technicianId], references: [id])
  client     User?                 @relation("Client", fields: [clientId], references: [id])
  products   ProductServiceOrder[]
}

model Product {
  id            String                @id @default(uuid()) @db.Uuid
  name          String
  price         Float
  cost          Float?
  unityType     String?
  minQtd        Int?
  qtd           Int?
  companyId     String                @db.Uuid
  company       Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  serviceOrders ProductServiceOrder[]
}

model ProductServiceOrder {
  id             String  @id @default(uuid()) @db.Uuid
  productId      String? @db.Uuid // Pode ser nulo
  serviceOrderId String? @db.Uuid // Pode ser nulo

  product      Product?      @relation(fields: [productId], references: [id])
  serviceOrder ServiceOrder? @relation(fields: [serviceOrderId], references: [id])

  @@unique([productId, serviceOrderId])
}
